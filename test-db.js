
const { Client } = require('pg');
require('dotenv').config();

async function testConnection() {
  console.log('üîç Testando conex√£o com PostgreSQL...\n');

  if (!process.env.DATABASE_URL) {
    console.error('‚ùå DATABASE_URL n√£o encontrado!');
    console.error('Adicione DATABASE_URL nos Secrets do Replit');
    return;
  }

  console.log('‚úÖ DATABASE_URL encontrado');
  console.log('üìù Formato: ' + process.env.DATABASE_URL.replace(/:[^:@]+@/, ':****@'));

  const client = new Client({
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    }
  });

  try {
    console.log('\nüîå Tentando conectar...');
    await client.connect();
    console.log('‚úÖ Conex√£o estabelecida com sucesso!\n');

    console.log('üìä Testando query...');
    const result = await client.query('SELECT NOW()');
    console.log('‚úÖ Query executada com sucesso!');
    console.log('‚è∞ Hora do servidor:', result.rows[0].now);

    console.log('\nüìã Listando tabelas existentes...');
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `);

    if (tables.rows.length === 0) {
      console.log('‚ö†Ô∏è  Nenhuma tabela encontrada (banco vazio)');
    } else {
      console.log(`‚úÖ ${tables.rows.length} tabela(s) encontrada(s):`);
      tables.rows.forEach(row => {
        console.log(`   - ${row.table_name}`);
      });
    }

    await client.end();
    console.log('\n‚úÖ Teste conclu√≠do com sucesso!');

  } catch (error) {
    console.error('\n‚ùå Erro durante o teste:', error.message);
    console.error('\nüìã Poss√≠veis solu√ß√µes:');
    console.error('1. Verifique se o DATABASE_URL est√° correto');
    console.error('2. Confirme que o banco PostgreSQL est√° acess√≠vel');
    console.error('3. Verifique as credenciais de acesso');
  }
}

testConnection();
